{"version":3,"sources":["sketches/sketch.js","App.js","index.js"],"names":["p","mic","fft","spectrum","boxWidth","boxHeight","pink","drawRect","x","y","color","fill","rect","cosMemo","cosOf","angle","cos","sinMemo","sinOf","sin","anotherCircle","drawAnotherCircle","i","spectrumCount","length","rad","map","windowHeight","rad1","prevX","midX","prevY","midY","nowX","nowY","circle","wildCircle","drawWildCircle","wildX","boringCircle","drawBoringCircle","lineCircle","drawLineCircle","line","setup","createCanvas","windowWidth","noFill","p5","AudioIn","start","FFT","setInput","angleMode","DEGREES","updateDimension","myDiv","createDiv","position","userStartAudio","then","remove","setFrameRate","draw","analyze","doubleClicked","toggleFullScreen","windowResized","resizeCanvas","document","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","App","className","sketch","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4deb7d64.chunk.js","sourcesContent":["import \"p5/lib/addons/p5.sound\";\nimport p5 from \"p5\";\n\nexport default function(p) {\n  let mic, fft;\n  let pink = \"#ff4081\";\n  let yellow = \"#ffff00\";\n  let spectrum;\n\n  let drawRect = (x, y, color) => {\n    p.fill(color);\n    p.rect(x, y, boxWidth, boxHeight);\n  };\n\n  let cosMemo = {};\n  let cosOf = angle => {\n    if (angle in cosMemo) return cosMemo[angle];\n    else {\n      cosMemo[angle] = p.cos(angle);\n      return cosMemo[angle];\n    }\n  };\n\n  let sinMemo = {};\n  let sinOf = angle => {\n    if (angle in sinMemo) return sinMemo[angle];\n    else {\n      sinMemo[angle] = p.sin(angle);\n      return sinMemo[angle];\n    }\n  };\n\n  let anotherCircle = {};\n  let drawAnotherCircle = i => {\n    let spectrumCount = spectrum.length - i;\n\n    let rad = p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2);\n    let rad1 = p.map(\n      spectrum[spectrum.length - 1 - i],\n      0,\n      spectrum.length,\n      0,\n      p.windowHeight * 2\n    );\n\n    let prevX = anotherCircle.midX + rad * cosOf(spectrumCount * angle);\n    let prevY = anotherCircle.midY + rad * sinOf(spectrumCount * angle);\n\n    let nowX = anotherCircle.midX + rad1 * cosOf(i * angle);\n    let nowY = anotherCircle.midY + rad1 * sinOf(i * angle);\n\n    p.fill(pink);\n    p.circle(prevX, prevY, 10);\n    p.fill(yellow);\n    p.circle(nowX, nowY, 10);\n  };\n\n  let wildCircle = {};\n  let drawWildCircle = i => {\n    if (i % 2 === 0) p.fill(pink);\n    else p.fill(yellow);\n\n    let wildX = p.map(i, 0, spectrum.length, boxWidth / 4, boxWidth);\n    p.circle(\n      wildX,\n      wildCircle.midY,\n      p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2)\n    );\n  };\n\n  let boringCircle = {};\n  let drawBoringCircle = i => {\n    if (i % 2 === 0) p.fill(yellow);\n    else p.fill(pink);\n\n    p.circle(\n      boringCircle.x + boxWidth / 2,\n      boringCircle.y + boxHeight / 2,\n      p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2)\n    );\n  };\n\n  let lineCircle = {};\n  let drawLineCircle = i => {\n    let rad = p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2);\n    p.line(\n      lineCircle.midX,\n      lineCircle.midY,\n      lineCircle.midX + rad * p.cos(i * angle),\n      lineCircle.midY + rad * p.sin(i * angle)\n    );\n  };\n\n  p.setup = function() {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    p.noFill();\n\n    mic = new p5.AudioIn();\n    mic.start();\n    fft = new p5.FFT();\n    fft.setInput(mic);\n\n    p.angleMode(p.DEGREES);\n\n    updateDimension();\n\n    let myDiv = p.createDiv(\"click to start audio\");\n    myDiv.position(boxWidth, boxHeight);\n\n    // Start the audio context on a click/touch event\n    p.userStartAudio().then(function() {\n      myDiv.remove();\n    });\n\n    p.setFrameRate(24);\n  };\n\n  let boxWidth;\n  let boxHeight;\n  let updateDimension = () => {\n    boxWidth = p.windowWidth / 2;\n    boxHeight = p.windowHeight / 2;\n\n    wildCircle.x = 0;\n    wildCircle.y = boxHeight;\n    wildCircle.midY = wildCircle.y + boxHeight / 2;\n\n    anotherCircle.x = boxWidth;\n    anotherCircle.y = 0;\n    anotherCircle.midX = anotherCircle.x + boxWidth / 2;\n    anotherCircle.midY = anotherCircle.y + boxHeight / 2;\n\n    boringCircle.x = boxWidth;\n    boringCircle.y = boxHeight;\n\n    lineCircle.x = 0;\n    lineCircle.y = 0;\n    lineCircle.midX = boxWidth / 2;\n    lineCircle.midY = boxHeight / 2;\n  };\n\n  let angle;\n  p.draw = function() {\n    spectrum = fft.analyze();\n    angle = spectrum.length / 360;\n\n    drawRect(wildCircle.x, wildCircle.y, yellow);\n    drawRect(anotherCircle.x, anotherCircle.y, yellow);\n    drawRect(boringCircle.x, boringCircle.y, pink);\n    drawRect(lineCircle.x, lineCircle.y, pink);\n\n    p.line(\n      wildCircle.x,\n      wildCircle.midY,\n      wildCircle.x + boxWidth,\n      wildCircle.midY\n    );\n\n    for (let i = 0; i < spectrum.length; i++) {\n      drawWildCircle(i);\n      drawAnotherCircle(i);\n      drawBoringCircle(i);\n      drawLineCircle(i);\n    }\n\n    p.noFill();\n  };\n\n  p.doubleClicked = function() {\n    toggleFullScreen();\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    updateDimension();\n  };\n\n  let toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport sketch from \"./sketches/sketch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <P5Wrapper sketch={sketch}></P5Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}