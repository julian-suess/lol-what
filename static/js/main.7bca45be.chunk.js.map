{"version":3,"sources":["sketches/sketch.js","App.js","index.js"],"names":["simpleFFT","p","mic","fft","spectrum","video","vidLoad","setup","createCanvas","windowWidth","windowHeight","noFill","p5","AudioIn","start","FFT","setInput","userStartAudio","then","console","log","createVideo","hide","draw","analyze","rect","midi","freqToMidi","length","clear","translate","rotate","PI","strokeWeight","i","x","map","j","y","line","mode3","windowResized","resizeCanvas","onMousePressed","loop","App","className","sketch","ReactDOM","render","document","getElementById"],"mappings":"kQAGIA,EAAY,SAASC,GACvB,IAAIC,EAAKC,EACLC,EAuCAC,EA+DJ,SAASC,KA7DTL,EAAEM,MAAQ,WACRN,EAAEO,aAAaP,EAAEQ,YAAaR,EAAES,cAChCT,EAAEU,UAEFT,EAAM,IAAIU,IAAGC,SACTC,SACJX,EAAM,IAAIS,IAAGG,KACTC,SAASd,GAGbD,EAAEgB,iBAAiBC,MAAK,WACtBC,QAAQC,IAAI,YAMdf,EAAQJ,EAAEoB,YAAY,CAAC,oBAAqBf,IACtCgB,QAGRrB,EAAEsB,KAAO,WACPnB,EAAWD,EAAIqB,UAEfvB,EAAEwB,KAAK,EAAG,EAAGxB,EAAEQ,YAAaR,EAAES,cAG9B,IAAIgB,EAAOzB,EAAE0B,WAAWvB,EAASA,EAASwB,OAAS,IACnDT,QAAQC,IAAIM,GAeZzB,EAAEU,SACFV,EAAE4B,QA7DQ,WACV5B,EAAE6B,UAAU7B,EAAEQ,aAAc,IAAOR,EAAES,cACrCT,EAAE8B,OAAO9B,EAAE+B,GAAK,GAEhB/B,EAAEgC,aAAa,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAI9B,EAASwB,OAAQM,GAAK,GAExC,IADA,IAAIC,EAAIlC,EAAEmC,IAAIF,EAAG,EAAG9B,EAASwB,OAAQ,EAAG3B,EAAEQ,aACjC4B,EAAIjC,EAASwB,OAAS,EAAGS,GAAK,EAAGA,GAAK,GAAI,CACjD,IAAIC,EAAIrC,EAAEmC,IAAIC,EAAG,EAAGjC,EAASwB,OAAQ,EAAG3B,EAAEQ,aAE1CR,EAAEsC,KAAKJ,EAAGG,EAAIlC,EAAS8B,GAAIC,EAAGG,EAAIlC,EAAS8B,KAyD/CM,IAGFvC,EAAEwC,cAAgB,WAChBxC,EAAEyC,aAAazC,EAAEQ,YAAaR,EAAES,eAGlCT,EAAE0C,eAAiB,WACjBtC,EAAMuC,SC3FKC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAWC,OAAQ/C,MCHzBgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7bca45be.chunk.js","sourcesContent":["import \"p5/lib/addons/p5.sound\";\nimport p5 from \"p5\";\n\nlet simpleFFT = function(p) {\n  let mic, fft;\n  let spectrum;\n\n  let mode = 0;\n\n  let mode1 = () => {\n    for (let i = 0; i < spectrum.length; i += 50) {\n      let x = p.map(i, spectrum.length, 0, 0, p.windowWidth);\n      let diff = i % 4 === 0 ? spectrum[i] : -spectrum[i];\n      p.circle(x, p.windowHeight / 2 + diff, spectrum[i]);\n      p.line(x, p.windowHeight / 2, x, p.windowHeight / 2 + diff);\n    }\n  };\n\n  let mode2 = () => {\n    p.fill(255, 255, 255);\n    for (let i = 0; i < spectrum.length; i += 50) {\n      p.circle(\n        p.windowWidth / 2 - spectrum[i],\n        p.windowHeight / 2 + spectrum[i],\n        spectrum[i]\n      );\n    }\n  };\n\n  let mode3 = () => {\n    p.translate(p.windowWidth, -0.05 * p.windowHeight);\n    p.rotate(p.PI / 2);\n\n    p.strokeWeight(2);\n    for (let i = 0; i < spectrum.length; i += 10) {\n      let x = p.map(i, 0, spectrum.length, 0, p.windowWidth);\n      for (let j = spectrum.length - 1; j >= 0; j -= 10) {\n        let y = p.map(j, 0, spectrum.length, 0, p.windowWidth);\n\n        p.line(x, y + spectrum[i], x, y - spectrum[i]);\n      }\n    }\n  };\n\n  let video;\n\n  p.setup = function() {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    p.noFill();\n\n    mic = new p5.AudioIn();\n    mic.start();\n    fft = new p5.FFT();\n    fft.setInput(mic);\n\n    // Start the audio context on a click/touch event\n    p.userStartAudio().then(function() {\n      console.log(\"Yes!\");\n    });\n\n    // p.setFrameRate(24);\n\n    // specify multiple formats for different browsers\n    video = p.createVideo([\"assets/video.mp4\"], vidLoad);\n    video.hide();\n  };\n\n  p.draw = function() {\n    spectrum = fft.analyze();\n\n    p.rect(0, 0, p.windowWidth, p.windowHeight);\n    // p.fill(\"#000000\");\n\n    let midi = p.freqToMidi(spectrum[spectrum.length / 2]);\n    console.log(midi);\n\n    // if (midi > 40) {\n    //   p.fill(p.random(255), p.random(255), p.random(255));\n    // }\n    // if (midi > 20) {\n    //   mode2();\n    // }\n    // if (midi > 10) {\n    //   mode1();\n    // }\n\n    // mode2();\n    // mode1();\n\n    p.noFill();\n    p.clear();\n\n    // p.image(video, 0, 0); // draw the video frame to canvas\n    // p.filter(GRAY);\n    //p.image(video, 150, 150); // draw a second copy to canvas\n\n    mode3();\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n  };\n\n  p.onMousePressed = function() {\n    video.loop();\n  };\n\n  function vidLoad() {\n    // video.loop();\n    // video.volume(0);\n  }\n};\n\nlet fourFighters = function(p) {\n  let mic, fft;\n  let pink = \"#ff4081\";\n  let yellow = \"#ffff00\";\n  let spectrum;\n\n  let drawRect = (x, y, color) => {\n    p.fill(color);\n    p.rect(x, y, boxWidth, boxHeight);\n  };\n\n  let cosMemo = {};\n  let cosOf = angle => {\n    if (angle in cosMemo) return cosMemo[angle];\n    else {\n      cosMemo[angle] = p.cos(angle);\n      return cosMemo[angle];\n    }\n  };\n\n  let sinMemo = {};\n  let sinOf = angle => {\n    if (angle in sinMemo) return sinMemo[angle];\n    else {\n      sinMemo[angle] = p.sin(angle);\n      return sinMemo[angle];\n    }\n  };\n\n  let anotherCircle = {};\n  let drawAnotherCircle = i => {\n    let spectrumCount = spectrum.length - i;\n\n    let rad = p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2);\n    let rad1 = p.map(\n      spectrum[spectrum.length - 1 - i],\n      0,\n      spectrum.length,\n      0,\n      p.windowHeight * 2\n    );\n\n    let prevX = anotherCircle.midX + rad * cosOf(spectrumCount * angle);\n    let prevY = anotherCircle.midY + rad * sinOf(spectrumCount * angle);\n\n    let nowX = anotherCircle.midX + rad1 * cosOf(i * angle);\n    let nowY = anotherCircle.midY + rad1 * sinOf(i * angle);\n\n    p.fill(pink);\n    p.circle(prevX, prevY, 10);\n    p.fill(yellow);\n    p.circle(nowX, nowY, 10);\n  };\n\n  let wildCircle = {};\n  let drawWildCircle = i => {\n    if (i % 2 === 0) p.fill(pink);\n    else p.fill(yellow);\n\n    let wildX = p.map(i, 0, spectrum.length, boxWidth / 4, boxWidth);\n    p.circle(\n      wildX,\n      wildCircle.midY,\n      p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2)\n    );\n  };\n\n  let boringCircle = {};\n  let drawBoringCircle = i => {\n    if (i % 2 === 0) p.fill(yellow);\n    else p.fill(pink);\n\n    p.circle(\n      boringCircle.x + boxWidth / 2,\n      boringCircle.y + boxHeight / 2,\n      p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2)\n    );\n  };\n\n  let lineCircle = {};\n  let drawLineCircle = i => {\n    let rad = p.map(spectrum[i], 0, spectrum.length, 0, p.windowHeight * 2);\n    p.line(\n      lineCircle.midX,\n      lineCircle.midY,\n      lineCircle.midX + rad * p.cos(i * angle),\n      lineCircle.midY + rad * p.sin(i * angle)\n    );\n  };\n\n  p.setup = function() {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    p.noFill();\n\n    mic = new p5.AudioIn();\n    mic.start();\n    fft = new p5.FFT();\n    fft.setInput(mic);\n\n    p.angleMode(p.DEGREES);\n\n    updateDimension();\n\n    // Start the audio context on a click/touch event\n    p.userStartAudio().then(function() {\n      console.log(\"Yes!\");\n    });\n\n    p.setFrameRate(24);\n  };\n\n  let boxWidth;\n  let boxHeight;\n  let updateDimension = () => {\n    boxWidth = p.windowWidth / 2;\n    boxHeight = p.windowHeight / 2;\n\n    wildCircle.x = 0;\n    wildCircle.y = boxHeight;\n    wildCircle.midY = wildCircle.y + boxHeight / 2;\n\n    anotherCircle.x = boxWidth;\n    anotherCircle.y = 0;\n    anotherCircle.midX = anotherCircle.x + boxWidth / 2;\n    anotherCircle.midY = anotherCircle.y + boxHeight / 2;\n\n    boringCircle.x = boxWidth;\n    boringCircle.y = boxHeight;\n\n    lineCircle.x = 0;\n    lineCircle.y = 0;\n    lineCircle.midX = boxWidth / 2;\n    lineCircle.midY = boxHeight / 2;\n  };\n\n  let angle;\n  p.draw = function() {\n    spectrum = fft.analyze();\n    angle = spectrum.length / 360;\n\n    drawRect(wildCircle.x, wildCircle.y, yellow);\n    drawRect(anotherCircle.x, anotherCircle.y, yellow);\n    drawRect(boringCircle.x, boringCircle.y, pink);\n    drawRect(lineCircle.x, lineCircle.y, pink);\n\n    p.line(\n      wildCircle.x,\n      wildCircle.midY,\n      wildCircle.x + boxWidth,\n      wildCircle.midY\n    );\n\n    for (let i = 0; i < spectrum.length; i++) {\n      drawWildCircle(i);\n      drawAnotherCircle(i);\n      drawBoringCircle(i);\n      drawLineCircle(i);\n    }\n\n    p.noFill();\n  };\n\n  p.doubleClicked = function() {\n    toggleFullScreen();\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    updateDimension();\n  };\n\n  let toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  };\n};\n\nexport { fourFighters as default, simpleFFT };\n","import React from \"react\";\nimport \"./App.css\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport { simpleFFT } from \"./sketches/sketch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <P5Wrapper sketch={simpleFFT}></P5Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}